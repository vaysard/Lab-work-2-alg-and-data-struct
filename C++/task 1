#include <iostream>

// Узел списка
struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    // Функция разворота списка (рекурсивная версия)
    ListNode* reverseList(ListNode* head) {
        // Базовый случай: пустой список или последний элемент
        if (head == nullptr || head->next == nullptr) {
            return head;
        }
        
        // Рекурсивно разворачиваем остальную часть списка
        ListNode* newHead = reverseList(head->next);
        
        // Разворачиваем указатель текущего узла
        head->next->next = head;
        head->next = nullptr;
        
        return newHead;
    }
};

// Вспомогательная функция для печати списка
void printList(ListNode* head) {
    ListNode* current = head;
    while (current != nullptr) {
        std::cout << current->val;
        if (current->next != nullptr) {
            std::cout << " -> ";
        }
        current = current->next;
    }
    std::cout << " -> NULL" << std::endl;
}

// Вспомогательная функция для создания списка из массива
ListNode* createList(int values[], int size) {
    if (size == 0) return nullptr;
    
    ListNode* head = new ListNode(values[0]);
    ListNode* current = head;
    
    for (int i = 1; i < size; i++) {
        current->next = new ListNode(values[i]);
        current = current->next;
    }
    
    return head;
}

// Вспомогательная функция для очистки памяти
void deleteList(ListNode* head) {
    while (head != nullptr) {
        ListNode* temp = head;
        head = head->next;
        delete temp;
    }
}

// Демонстрация
int main() {
    setlocale(LC_ALL, "");
    
    // Создаем список: 1 -> 2 -> 3 -> 4 -> 5
    int values[] = {1, 2, 3, 4, 5};
    ListNode* head = createList(values, 5);

    std::cout << "Исходный список: ";
    printList(head);

    Solution solution;
    ListNode* reversedHead = solution.reverseList(head);

    std::cout << "Развернутый список: ";
    printList(reversedHead);

    // Очистка памяти
    deleteList(reversedHead);

    return 0;
}
